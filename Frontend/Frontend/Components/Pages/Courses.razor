@page "/courses"
@using System.Text.Json.Serialization
@using System.Text.Json

@attribute [StreamRendering]

@attribute [Authorize]


<PageTitle>Courses</PageTitle>


<section class="courses">
    <div class="container">
        <div class="header">
            <h1>Courses</h1>
            <form id="form-filters">
                <select>
                    <option>All Categories</option>
                </select>
                <div class="input-search-group">
                    <input id="searchQuery" name="searchQuery" placeholder="Search courses" />
                    <i class="fa-regular fa-search"></i>
                </div>
            </form>
        </div>

        <div class="course-items">
            @if(courses == null)
            {
                <p><em>No courses found yet. Please wait....</em></p>
            }
            else
            {
                @foreach (var course in courses)
                {
                    <div class="course" asp-action="Details" asp-controller="Courses" asp-route-id="@course.Id">
                        @if (course.IsBestseller)
                        {
                            <div class="bestseller">Best Seller</div>
                        }

                        <a asp-action="Join" asp-controller="Courses" asp-route-id="@course.Id" class="btn btn-circle bookmark"><i class="fa-regular fa-bookmark"></i></a>

                        <img src="@course.Image" alt="@course.Title" />

                        <div class="content">
                            <h5 class="title">@course.Title</h5>
                            <p class="author">By @course.Author</p>
                            <div class="pricing">
                                @if (!string.IsNullOrEmpty(course.DiscountPrice))
                                {
                                    <div class="discount">@course.DiscountPrice</div>
                                }
                                <div class="price @(!string.IsNullOrEmpty(course.DiscountPrice)? "discount-enabled" : "")">@course.Price</div>
                            </div>

                            <div class="footer">
                                <div class="hours">
                                    <i class="fa-regular fa-clock">@course.Hours hours</i>
                                </div>
                                <div class="likes">
                                    <i class="fa-regular fa-thumbs-up"></i> @course.LikeInProcent (@course.LikeInProcent)
                                </div>
                            </div>
                        </div>
                    </div>
                }

            }

        </div>
    </div>

</section>





@code
{
    private CourseModel[]? courses;

    protected override async Task OnInitializedAsync()
    {
        var query = new GraphQlQuery { Query = "{getCourses {id isBestseller title authors {name} categories prices {price discount currency} hours likesInProcent likes imageUri}}" };
        var response = await Http.PostAsJsonAsync("https://courseprovider-davidob.azurewebsites.net/api/graphql?code=wfRT4tz4F7Pu2a9apErQiGehISR8SdbiYng0Dl7iduFcAzFufAnqOA%3D%3D", query);

        if (response.IsSuccessStatusCode)
        {
            var result = await response.Content.ReadFromJsonAsync<DynamicGraphQlResponse>();
            courses = result?.Data.GetProperty("getCourses").EnumerateArray()
                .Select(course => new CourseModel
                    {
                        Id = GetStringValue(course, "id"),
                        IsBestseller = GetBooleanValue(course, "isBestseller"),
                        Image = GetStringValue(course, "imageUri"),
                        Title = GetStringValue(course, "title"),
                        Author = GetArrayElementStringValue(course.GetProperty("authors"), 0, "name"),
                        Price = $"{GetStringValue(course.GetProperty("prices"), "currency")} {GetDoubleValue(course.GetProperty("prices"), "price")}",
                        DiscountPrice = GetDoubleValue(course.GetProperty("prices"), "discount") > 0
                            ? $"{GetStringValue(course.GetProperty("prices"), "currency")} {GetDoubleValue(course.GetProperty("prices"), "price") - GetDoubleValue(course.GetProperty("prices"), "discount")}"
                            : null,
                        Hours = GetStringValue(course, "hours"),
                        LikeInProcent = GetStringValue(course, "likesInProcent"),
                        LikeInNumbers = GetStringValue(course, "likes"),
                    })
                .ToList()
                .ToArray();
        }
    }

    private string GetStringValue(JsonElement element, string propertyName)
    {
        return element.TryGetProperty(propertyName, out JsonElement property) ? property.GetString() ?? string.Empty : string.Empty;
    }

    private bool GetBooleanValue(JsonElement element, string propertyName)
    {
        return element.TryGetProperty(propertyName, out JsonElement property) && property.GetBoolean();
    }

    private double GetDoubleValue(JsonElement element, string propertyName)
    {
        return element.TryGetProperty(propertyName, out JsonElement property) ? property.GetDouble() : 0.0;
    }

    private string GetArrayElementStringValue(JsonElement element, int index, string propertyName)
    {
        if (element.GetArrayLength() > index)
        {
            var arrayElement = element[index];
            return GetStringValue(arrayElement, propertyName);
        }
        return string.Empty;
    }

    private class GraphQlQuery
    {
        public string Query { get; set; } = null!;
    }

    private class DynamicGraphQlResponse
    {
        [JsonPropertyName("data")]
        public JsonElement Data { get; set; }
    }

    private class CourseModel
    {
        public string? Id { get; set; }
        public bool IsBestseller { get; set; }
        public string? Image { get; set; }
        public string? Title { get; set; }
        public string? Author { get; set; }
        public string? Price { get; set; }
        public string? DiscountPrice { get; set; }
        public string? Hours { get; set; }
        public string? LikeInProcent { get; set; }
        public string? LikeInNumbers { get; set; }
    }
}
